pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'tri-bulles-ops'
        IMAGE_NAME = 'tri-bulles-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'localhost:5000'  // Modifier selon votre registry
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '=== [OPS] R√©cup√©ration du code source ==='
                git branch: 'main',
                    url: 'https://github.com/Elyesssss/Jenkins.git'
            }
        }
        
        stage('V√©rification environnement') {
            steps {
                echo '=== [OPS] V√©rification des outils ==='
                sh '''
                    echo "V√©rification de GCC..."
                    gcc --version
                    echo ""
                    echo "V√©rification de Make..."
                    make --version
                    echo ""
                    echo "V√©rification de Docker..."
                    docker --version
                '''
            }
        }
        
        stage('Compilation') {
            steps {
                echo '=== [OPS] Compilation du programme ==='
                sh '''
                    echo "Nettoyage..."
                    make clean || true
                    echo ""
                    echo "Compilation des programmes..."
                    make all
                    echo ""
                    echo "V√©rification des binaires..."
                    ls -lh build/
                '''
            }
        }
        
        stage('Tests unitaires') {
            steps {
                echo '=== [OPS] Ex√©cution des tests unitaires ==='
                sh '''
                    echo "Tests tri d'entiers..."
                    make test_bulles
                    echo ""
                    echo "Tests tri de cha√Ænes..."
                    make test_chaines
                    echo ""
                    echo "‚úÖ Tous les tests sont pass√©s !"
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo '=== [OPS] Construction de l\'image Docker ==='
                sh """
                    echo "Construction de l'image..."
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                    echo ""
                    echo "Image cr√©√©e: ${IMAGE_NAME}:${IMAGE_TAG}"
                """
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo '=== [OPS] Test de l\'image Docker ==='
                sh """
                    echo "Test du programme tri d'entiers..."
                    docker run --rm ${IMAGE_NAME}:${IMAGE_TAG}
                    echo ""
                    echo "‚úÖ L'image Docker fonctionne correctement"
                """
            }
        }
        
        stage('DEPLOY') {
            steps {
                echo '=== [OPS] D√âPLOIEMENT ==='
                sh """
                    echo "üì¶ D√©ploiement de l'application..."
                    echo ""
                    echo "Option 1: Push vers le registry Docker"
                    # docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                    # docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                    echo "(D√©commentez les lignes ci-dessus si vous avez un registry)"
                    echo ""
                    echo "Option 2: D√©ploiement local - Cr√©ation d'un conteneur"
                    docker stop tri-bulles-container 2>/dev/null || true
                    docker rm tri-bulles-container 2>/dev/null || true
                    echo ""
                    echo "‚úÖ Image pr√™te pour le d√©ploiement: ${IMAGE_NAME}:${IMAGE_TAG}"
                    echo ""
                    echo "Images disponibles:"
                    docker images | grep tri-bulles || true
                """
            }
        }
        
        stage('Rapport de d√©ploiement') {
            steps {
                echo '=== [OPS] G√©n√©ration du rapport de d√©ploiement ==='
                sh """
                    echo "=== RAPPORT DE D√âPLOIEMENT ===" > rapport_ops.txt
                    echo "Date: \$(date)" >> rapport_ops.txt
                    echo "Build: ${BUILD_NUMBER}" >> rapport_ops.txt
                    echo "" >> rapport_ops.txt
                    echo "Image Docker:" >> rapport_ops.txt
                    echo "  - Nom: ${IMAGE_NAME}" >> rapport_ops.txt
                    echo "  - Tag: ${IMAGE_TAG}" >> rapport_ops.txt
                    echo "  - Latest: ${IMAGE_NAME}:latest" >> rapport_ops.txt
                    echo "" >> rapport_ops.txt
                    echo "Statut: ‚úÖ D√âPLOY√â" >> rapport_ops.txt
                    echo "" >> rapport_ops.txt
                    echo "Commandes utiles:" >> rapport_ops.txt
                    echo "  - Ex√©cuter: docker run --rm ${IMAGE_NAME}:${IMAGE_TAG}" >> rapport_ops.txt
                    echo "  - Inspecter: docker inspect ${IMAGE_NAME}:${IMAGE_TAG}" >> rapport_ops.txt
                    echo "  - Logs: docker logs <container_id>" >> rapport_ops.txt
                    cat rapport_ops.txt
                """
                archiveArtifacts artifacts: 'rapport_ops.txt',
                                fingerprint: true
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ [OPS] Pipeline ex√©cut√© avec succ√®s !'
            echo "üöÄ Application d√©ploy√©e: ${IMAGE_NAME}:${IMAGE_TAG}"
            echo 'üìä Consultez les rapports archiv√©s pour plus de d√©tails'
        }
        failure {
            echo '‚ùå [OPS] Le pipeline a √©chou√©.'
            echo 'üîç V√©rifiez les logs pour identifier le probl√®me'
        }
        always {
            echo '=== [OPS] Nettoyage ==='
            sh '''
                make clean || true
                docker system prune -f
            '''
        }
    }
}
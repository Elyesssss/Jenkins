pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'tri-bulles-et-chaines-ops'
        IMAGE_NAME = 'tri-bulles-et-chaines-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'localhost:5000'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '=== [OPS] Récupération du code source ==='
                git branch: 'main',
                    url: 'https://github.com/Elyesssss/Jenkins.git'
            }
        }
        
        stage('Vérification environnement') {
            steps {
                echo '=== [OPS] Vérification des outils ==='
                bat '''
                    echo Vérification de GCC...
                    gcc --version
                    echo.
                    echo Vérification de Make...
                    make --version
                    echo.
                    echo Vérification de Docker...
                    docker --version
                '''
            }
        }
        
        stage('Compilation') {
            steps {
                echo '=== [OPS] Compilation du programme ==='
                bat '''
                    echo Nettoyage...
                    make clean
                    echo.
                    echo Compilation des programmes...
                    make all
                    echo.
                    echo Vérification des binaires...
                    dir build
                '''
            }
        }
        
        stage('Tests unitaires') {
            steps {
                echo '=== [OPS] Exécution des tests unitaires ==='
                bat '''
                    echo Tests tri d'entiers...
                    make test_bulles
                    echo.
                    echo Tests tri de chaînes...
                    make test_chaines
                    echo.
                    echo  Tous les tests sont passés !
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo '=== [OPS] Construction de l\'image Docker ==='
                bat """
                    echo Construction de l'image...
                    docker build -t %IMAGE_NAME%:%IMAGE_TAG% .
                    docker tag %IMAGE_NAME%:%IMAGE_TAG% %IMAGE_NAME%:latest
                    echo.
                    echo Image créée: %IMAGE_NAME%:%IMAGE_TAG%
                """
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo '=== [OPS] Test de l\'image Docker ==='
                bat """
                    echo Test du programme tri à bulles...
                    docker run --rm %IMAGE_NAME%:%IMAGE_TAG% tri_bulles
                    echo.
                    echo Test du programme tri de chaînes...
                    docker run --rm %IMAGE_NAME%:%IMAGE_TAG% tri_chaines
                    echo.
                    echo  L'image Docker fonctionne correctement avec les deux programmes
                """
            }
        }
        
        stage('DEPLOY') {
            steps {
                echo '=== [OPS] DÉPLOIEMENT ==='
                bat """
                    echo  Déploiement de l'application...
                    echo.
                    echo Option 1: Push vers le registry Docker
                    echo (Décommentez les lignes ci-dessous si vous avez un registry)
                    echo.
                    echo Option 2: Déploiement local - Arrêt conteneurs existants
                    docker stop tri-bulles-container 2>nul || echo Aucun conteneur à arrêter
                    docker rm tri-bulles-container 2>nul || echo Aucun conteneur à supprimer
                    echo.
                    echo  Image prête pour le déploiement: %IMAGE_NAME%:%IMAGE_TAG%
                    echo.
                    echo Programmes disponibles dans l'image:
                    echo   - tri_bulles: Tri à bulles d'entiers
                    echo   - tri_chaines: Tri à bulles de chaînes
                    echo.
                    echo Images disponibles:
                    docker images | findstr tri-bulles
                """
            }
        }
        
        stage('Rapport de déploiement') {
            steps {
                echo '=== [OPS] Génération du rapport de déploiement ==='
                bat """
                    echo === RAPPORT DE DÉPLOIEMENT === > rapport_ops.txt
                    echo Date: %DATE% %TIME% >> rapport_ops.txt
                    echo Build: %BUILD_NUMBER% >> rapport_ops.txt
                    echo. >> rapport_ops.txt
                    echo Image Docker: >> rapport_ops.txt
                    echo   - Nom: %IMAGE_NAME% >> rapport_ops.txt
                    echo   - Tag: %IMAGE_TAG% >> rapport_ops.txt
                    echo   - Latest: %IMAGE_NAME%:latest >> rapport_ops.txt
                    echo. >> rapport_ops.txt
                    echo Statut:  DÉPLOYÉ >> rapport_ops.txt
                    echo. >> rapport_ops.txt
                    echo Commandes utiles: >> rapport_ops.txt
                    echo   - Exécuter tri à bulles: docker run --rm %IMAGE_NAME%:%IMAGE_TAG% tri_bulles >> rapport_ops.txt
                    echo   - Exécuter tri de chaînes: docker run --rm %IMAGE_NAME%:%IMAGE_TAG% tri_chaines >> rapport_ops.txt
                    echo   - Inspecter: docker inspect %IMAGE_NAME%:%IMAGE_TAG% >> rapport_ops.txt
                    type rapport_ops.txt
                """
                archiveArtifacts artifacts: 'rapport_ops.txt',
                                fingerprint: true
            }
        }
    }
    
    post {
        success {
            echo ' [OPS] Pipeline exécuté avec succès !'
            echo " Application déployée: ${IMAGE_NAME}:${IMAGE_TAG}"
            echo ' Consultez les rapports archivés pour plus de détails'
        }
        failure {
            echo ' [OPS] Le pipeline a échoué.'
            echo ' Vérifiez les logs pour identifier le problème'
        }
        always {
            echo '=== [OPS] Nettoyage ==='
            bat '''
                make clean || exit 0
                docker system prune -f
            '''
        }
    }
}